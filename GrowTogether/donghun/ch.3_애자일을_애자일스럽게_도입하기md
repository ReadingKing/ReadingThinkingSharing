## 하향식 접근의 함정

한번은 유니티를 통해 웹에서 동작하는 간단한 프로그램을 설계해 본적이 있다.
이때 사용한 방식이 정형적인 탑 다운 방식이었는데, 기획을 하고 설계까지 꼼꼼히 한 다음 본격적으로 유니티 프로젝트를 생성해서 간단한 한두가지 기능을 추가한 다음 빌드를 돌려보았다.
하지만 왠걸, 유니티 WebGL 빌드가 모바일 브라우저에서는 동작하지 않는다는 것을 그때 깨달은 것이다.
해서 이때 깨달은 것은 기획 -> 설계 -> 구현 -> 빌드 과정을 최대한 빠른 시간 안에 한 사이클을 돌려보는 것이었다.
특히 새로운 라이브러리를 추가하게 했을 때 예상치 못한 이슈들이 등장할 확률이 높기 때문에 추가 후 빌드를 한번 돌려보는 것도 좋은 방법이라 생각합니다.

## 전문가팀이 실패하는 이유

한 분야에 깊이 있는 전문가가 아니라면 소프트 스킬이 높은 제너럴 리스트가 되는 것도 한 가지 방법이란 생각이 듭니다.

## 구글이 밝힌 탁월한 팀의 비밀

> 5가지 성공적 팀의 특징을 찾았는데, 그중 압도적으로 높은 예측력을 보인 변수는 심리적 안전감이었다.

팀 토론 등 특별히 고안된 활동을 통해 심리적 안전감을 개선할 수 있었다.

책에서 심리적 안점감은 본인의 생각, 의견, 질문, 걱정, 혹은 실수가 드러났을 때 처벌 받거나 놀림 받지 않을 것이라는 믿음에서 나온다고 합니다 너무 전적으로 동의가 되는 부분인 게 이 중 하나라도 드러났을 때 처벌이나 놀림을 받게 된다면 심리적으로 불안해 질 수밖에 없을 것 같습니다.

현재 작업 중인 모든 코드에 대해 리뷰를 받고 있는데 정말 디테일한 부분(.csproj에서 수정한 xml 소스 등…)까지 리뷰를 받고 있습니다.

마침표를 하나 더 찍는 가벼운 휴먼 실수 조차 캐치를 하셔서 리뷰를 달아주시는 판국이다.

이로 인해 리뷰 요청 전에 2번 3번 코드를 검토를 하면서 심리적인 긴장감이 높아 지고 있어서 그런지 심리적으로 안정적이라는 생각은 들지 않는다. 다만 다행인 점은 사소한 휴먼 에러에 대해 질책은 받지 않기 때문에 심리적으로 불안정 하지는 않다.

다만 한가지 드는 생각은 내가 누군가의 코드를 리뷰를 해줘야 하는 일이 발생한다면 되도록 수정 사항에 대해서만 이야기 할 뿐 지적을 하지는 않도록 해야겠다.

셀프 질문 테스트

- 내가 이 일에서 실수를 하면 그걸로 비난을 받는 경우가 많다. -> No
- 이 조직에서 남들에게 도움을 구하기가 어렵다. -> No
- 내 관리자는 내가 전에 한 번도 해보지 않은 걸 해내는 방법을 배우거나 혹은 새로운 일을 맡도록 격려하는 경우가 많다. -> Little bit yes
- 내가 만약 다른 곳에서 더 나은 일을 구하려고 이 회사를 떠날 생각이 있다면 나는 그에 대해 내 관리자랑 이야기를 나눌 것이다. -> No
- 내가 나의 관리자에게 문제를 제기하면 그는 내가 해결책을 찾도록 도와주는 일에 그다지 관심을 보이지 않는 경우가 많다. -> No

## 쾌속 학습팀

> 단순히 업무 수행 능력뿐만 아니라 다른 사람과 협력을 얼마나 잘하는지, 새롭고 애매모호한 상황을 즐길 수 있는지, 자기보다 지위가 높은 사람에게도 자신 있게 의견 제안할 수 있는지 등을 보고 뽑았습니다.

새로운 기술을 팀단위에서 도입을 했을 때 개인의 노력 차원에서 치부하는 것에서 멈추지 않고 팀 차원에서 접근을 한 점이 신기하고 놀라웠습니다.

팀 차원에서 새로운 기술과 관련해서 토론의 장도 열고 그곳에서 적극적으로 각자의 의견을 내는 모습을 상상해 보니 새로운 기술에 대해 모두가 몰입하는 모습이 절로 그려집니다.

새로운 기술에 대해 열린 마음을 가지고 있는 팀원을 뽑는 것도 한편으로 중요한 부분이란 생각이 듭니다.

팀장으로서 새로운 기술을 도입할 때 책에서 이야기 하듯이 새로운 기회에 대한 가능성에 대해 동기부여를 하려고 해도 팀에 새로운 변화에 냉소적인 팀원이 한 명이라도 있다면 팀 전체적으로 몰입하기 어려울 것으로 보이기 때문입니다.

Q) 팀차원에서 새로운 기술을 도입하려고 시도를 한다면(ex. 언리얼 엔진으로 새로운 프로젝트를 진행, 또는 포톤이 아닌 다른 서버 라이브러리를 사용한다는 등) 솔직히 어떤 반응을 할 것 같을까요?

## 프로젝트 확률론

애자일은 좋은 일에 대해서는 ‘그리고’ 확률을 ‘또는’ 확률로 바꾸고, 나쁜일에 대해서는 ‘또는’ 확률을 ‘그리고’ 확률로 바꾸는 경향이 있습니다. 좋은 일은 공유를 해서 한 사람만이라도 중요한 통찰이 있었다면 이걸 공유해서 ‘또는’ 확률로 만들고, 버그 같이 나쁜 일에 대해서는 여러 사람이 중복 검토를 해서(짝 프로그래밍, 코드 공유, 코드 리뷰 등) 모두가 실수해야지만 구멍이 나게 ‘그리고’ 확률로 바꾸는 것입니다.

오랜만에 본 확률 계산이라 머리가 어질어질 했지만 핵심 원리는 다양한 사례로 이해가 가능했습니다.

단순히 일정을 산출 하는 부분에만 적용하는 가이드라기 보다 소프트웨어 개발 전반에 걸처 팀원 모두가 가지고 있으면 좋을 가이드라는 생각이 듭니다.

핵심은 공유와 중복 검토가 되겠네요.

더불어 실천이 가장 중요한 요소가 될 것 같습니다.

## 애자일의 씨앗

> “고객에게 매일 가치를 전하라”와 앞서 이야기한 함께 자라기와 어떻게 연결이 될까?

해당 문장에 들어 있는 단어들의 의미를 통해 그동안 저자가 이야기 했던 함께 자라기의 핵심이 들어있다고 합니다.

매일: 학습 빈도, 불확실성이 높은 프로젝트일 수록 “매일” 학습이 필요함, 더불어 질 좋은 학습은 “매일”의 피드백에서 나옴

가치: 진정한 피드백은 진짜 가치를 전할 때 얻을 수 있음

고객에게: 이해관계자(즉, 고객)과의 협력을 통해 소프트웨어 결과물을 얻을 수 있음

그동안 함께 이야기 나눴던 모든 요소가 결국 애자일의 각 부분이었다는 것을 이야기 하는 것 같습니다.

Q) 모든 요소가 다 중요해 보이지만 그 중 가장 마음와 와닿는 애자일의 핵심요소는 무엇인가요?

## 애자일 도입 성공 요인 분석

> 1. 애자일을 도입해서 성공하는 조직들이 국내에 있다.
2. 애자일 실천법을 잘 싱행하면 성공률도 높아질 수 있다.
3. 실천법 중에서 비교적 성공과 직결되는 것들이 존재한다. 그것은 고객 참여, 리팩터링, 코딩 후 자동화 단위 테스트 붙이기, 코드 공유 등이다.
4. 애자일 성숙도가 낮은 조직일수록 고객 참여를 하지 않으면 프로젝트 성공이 어렵다.
5. 무섭고 두렵지만 중요한 일이라면 계속 미루지 말라.
6. 뛰어난 애자일 코치가 있는 것이 애자일 도입 성공에 핵심적이다.
7. 뛰어난 애자일 코치는 함께 자란다.

저자의 관점에서 가장 중요한 변수는 아무래도 고객참여로 보입니다.

고객 참여 같은 경우 해당 프로젝트에 대한 고객(단순히 상급자 뿐만 아니라 실제로 사용자로써 고객)의 피드백을 주기적으로 받으면 된다가 결론으로 보이기 때문에 저는 코딩 후 자동화 단위 테스트 붙이기에 대해서 조금 이야기를 나눠볼까 싶습니다.

처음 단위 테스트에 대해서 이야기를 들었을 때 저는 특정 기능 중 일부분을 때어내서 새로운 프로젝트를 생성한 후 특정 기능만 동작하게끔 코딩을 하는 것이 단위 테스트라고 “크게” 오해를 했었습니다.

몇 번의 삽질 끝에 유니티에서 단위 테스트를 하는 방법을 찾아서 직접 설계한 간단한 API에 대해 테스트 코드를 짜고 테스트에 통과한 순간 얻은 것은 단순한 성취감 뿐이었지 그 이상의 무엇을 얻기는 어려웠습니다.

하지만 반전은 그 이후에 깨달았는데요, 이후 지속적으로 코드를 작성해 나아갔고 기존에 작성했던 테스트 코드가 정상적으로 통과하는 모습을 보면서 내가 작성한 코드에 대한 안전성을 믿을 수 있게 되었습니다.

즉, 새롭게 작성한 코드가 기존에 잘 동작하던 기능을 방해하고 있지 않다는 안도감 덕분에 전적으로 새로운 코드에만 집중해서 코드를 작성할 수 있게 되었죠.

더불에 이 과정에서 싱글톤에서 구현한 메서드가 테스트 코드에 큰 방해가 된다는 것을 깨닫게 되었습니다.

가령 A 테스트 코드를 검증하는 과정에서 싱글톤 메서드가 끼어들어 있었을 경우 원하지 않던 해당 싱글톤에 대한 테스트를 함께 돌려야 하기 때문에 내가 설계한 테스트 코드의 범위를 한참 벗어나는 일이 발생하게 되었습니다.

즉, 단위 테스트에 대해서 집중할 수록 의존성에 대해서 더 깊게 생각할 수 있게 되었죠.

무튼 결론적으로 테스트 코드를 통해 얻을 수 있었던 것은 기존에 작성한 코드에 대한 안정성과 의존성을 고려한 설계를 깨달을 수 있었습니다.

더불에 이러한 것들이 프로젝트 성공에도 분명 영향이 있을 것으로 보이네요.

Q) 평소 테스트 코드 작성에 대해서 접해본 경험이 있었을까요? 아니면 직접 테스트 코드를 작성해본 경험이 있을까요?

## 당신의 조직에 새 방법론이 먹히지 않는 이유

> 우리가 어떤 방법론을 쓰느냐는 문제보다도 누가 참여하는가가 훨씬 압도적으로 중요한 문제가 아닐까요?

결론적으로 애자일을 도입하는 조직에서 실패하는 가장 큰 이유는 그 팀의 리더일 수 있다가 저자가 이야기 하는 결론으로 보입니다.

아마 대부분의 조직에서 애자일을 도입할 때면 방법론에 집중을 하는 것 같습니다.

스크럼, 데일리 스탠드 미팅, 애자일에 도움이 되는 소프트웨어 도입 등, 사람에 집중하기 보다 도구에 집중하는 모습을 쉽게 찾아 볼 수 있게 됩니다.

저부터 만약 팀에 애자일을 도입을 한다면 함께 자리기를 팀원들끼리 함께 읽고 토론을 해보는 시간을 가졌으면 좋겠다는 생각이 듭니다.

물론 일을 하는 동기는 저마다 다르기 때문에 이런 과정이 달갑지 않는 사람이 있겠지만 이런 사람들을 설득하는 것 조차 저의 역량이지 않을까 싶습니다.

무튼, 무작정 이런 방법론을 시도해 보자는 접근보다 이러한 태도를 갖춰보자는 마인드로 하나씩 시도를 해보고 싶네요. 

개인적으로 애자일을 도입할 때 핵심은 도구가 아니라 태도라는 생각이 듭니다.

## 애자일을 애자일스럽게 도입하기

> 애자일을 도입할 때 확실성 위에서 진행하려고 한다면 문제가 된다. ..(중략).. 이것은 거의 모든 종류의 방법론 도입에 적용됩니다. 왜냐하면 방법론 도입은 태생적으로 불확실성이 높기 때문입니다. 그럴 때 현명한 전략은 정해진 수순을 따르는 것이 아니라 곁에 있는 사람들과 함께 주변을 탐색하고 조금 나아가고 확인하고를 반복하면서 우리의 현 맥락에 맞는 좋은 전략들을 스스로 만들어 나가는 것이 아닐까 합니다.

도요타의 린 소프트웨어 개발의 방법론에 때문에 도요타가 성공했던 것이 아니라 린 소프트웨어 개발법이 나올 수 있었던 문화 덕분에 성공할 수 있었다는 이야기가 나옵니다.

기업마다 저마다 다른 구성원, 문화가 구성되어 있기 때문에 동일한 애자일 방법론을 들이 밀어서는 성공하기 어렵다는 이야기인 듯 싶습니다.

그냥 딱 이러한 방법론을 쓰면 성공할 수 있어! 와 같은 결론이 나왔으면 좋았을텐데 어떤 결론 보다 어렵고 골치 아픈 것 같습니다.

다만, 그럼에도 깨닫게 되는 것은 소프트웨어를 만드는 것은 결국 사람이기 때문에 사람에 대한 이해가 없다면 소프트웨어를 성공적으로 만들기 힘들겠다는 생각이 듭니다.

개발자는 정말 배워야 하는 것이 많아 보입니다.

매일 새롭게 등장하는 개발 지식도 배우기 벅찬데 사람에 대한 공부까지 해야한다니… 

그렇기에 뛰어난 소프트웨어 엔지니어를 찾기가 힘들어 보이는 것 같고 그렇기에 뛰어난 소프트웨어 엔지니어가 귀해 보입니다.

Q) 마지막 질문이 되겠네요. 애자일 개발에 대해서 깨닫게 된 점을 각자 자유롭게 공유해 주시면 감사하겠습니다.