### 머리말
'우리'와 '함께'는 협력을 말하고, '자라다'는 학습을 말합니다. 그리고 '매일매일'은 그 접근 방법을 말합니다.
=> 함께 학습하는 접근방법을 배우자

++자라기?
학습방법을 학습하자, 수파리(일단 쓰고, 규칙을 깨고, 규칙을 넘어서자)

### 당신은 몇 년 차?
실제로 경력이 업계 최고 스텟이 아님, 문제를 이해하는데 시간이 적게 걸리는 것이 중요함
<업무 상관성>
상: 작업 샘플테스트(0.54), 지능(0.51), 구조화된 인터뷰(0.51)
중: 성실성(0.41), 꼼꼼함(0.31), 레퍼런스 체크(0.26)
하: 필체(0.02), 나이(-0.01 <= 오히려 어릴 수록 좋다는..??)
+의미 있는 "피드백"을 짧은 주기로 받는 것

********** Q1) 다른 분들의 경험상 위에 상중하로 분류된 개발자 스텟에 추가되거나 너무 과소/과대평가되었다고 느끼는 것이 있으신가요? 있으시면 간단한 이유도 알고 싶습니다
: 저는 솔직히 많은 개발자 분들을 뵌 것은 아니지만, 개인적으로는 지능(개발에 필요한 수학적, 혹은 상황적 잔머리, 센스 등) 수치 비중이 0.51보다 높게 느껴졌습니다.
(추후 추가할 예정)

### 자기계발은 복리로 돌아온다
자기계발을 아예 안하면 하위 30%의 개발자

********** Q2) 다들 자기계발을 어떤 식으로 하고 계신지 알고 싶습니다! 너무 개발적인 것이 아니더라도 장기적으로 보았을 때 그것이 도움이 되는 습관이라면(ex 운동은 정신건강에 이롭습니다) 그것도 알고싶습니다.
: 유니티 공식 블로그 염탐, 가끔 1인 개발(매우 간단한 것), 코드 품질 개선, 최적화 등에 대해 찾아보고 적용
(추후 추가할 예정)

<빨리 자라기>
1) 어떻게 이율을 높일 것인가
2) 지속적으로 현명한 투자를 어떻게 해야할 것인가
-가지고 있는 것 잘 활용하기
-외부 물질 자신의 것으로 만들기
-나를 개선하는 프로레스 생각해보기
-피드백 자주 받기
-내 능력을 높여주는 도구/환경을 점진적으로 구축하기

+ 워터폴이 아닌 애자일적인 과정에서 작업을 해야한다고 느낌

### 학습 프레임과 실행 프레임
작업 하면서 생각 좀 해라(그냥 한다가 아니라 더 잘할려고 배운다)


### 가장 학습하기 힘든 직업이 살아남는다
난 컴퓨터 프로그래머가 아니라 소프트웨어 개발자다
덕업일체, 작은 일을 할 때에도 매번 생각하며 "학습"의 느낌을 가져가자


### 달인이 되는 비결
실력 개선할 동기 + 적절한 주기의 피드백

